munipalities {
  type: state, county, town, district?

}

GET municipalities

office {
  municipality_id
}

CRUD for offices -- GET, POST, PUT, DELETE

requirement {
  municipality_id
  deadline_id
  form_id
}

deadline {
  municipality_id
}

form {
  municipality_id
}

relationship tables
| requirement_id | office_id |


*/

/*
TODO

- get python server working (flask?)
- get python connected to db via orm (sqlalchemy)
- make orm objects for
  - municipality
  - office
  - requirement
  - deadline
  - form
- Make GET for municipalities
- Make POST for office (which may also create deadlines and/or forms)
- Make GET for office
- Make DELETE for office

{
	id: null,
	title: "",
	description: "",
	salary: 0,
	commitment_min: 0,
	commitment_max: 0,
	terms: [
		{
			id: null,
			start: null,
			end: null,
			incumbents: [],
			election: {
				polling_date: null,
				seat_count: 1,
				candidates: [],
				deadlines: [
					{
						id: null,
						label: "",
						description: "",
						deadline: null,
					}
				],
				requirements: [
					{
						id: null,
						label: "",
						description: "",
						form: null,
						deadline: null,
					}
				],
				forms: [
					{
						id: null,
						label: "",
						description: "",
						url: "",
					}
				],
				notes: [],
			}
		}
	]
}

Possible solution for inhereted requirements

- Municipalities should belong to other municipalities 
- Office objects should look up the their chain of municipalities for inhereted responsibilities

- Requirements created (or edited) at the municple level can be optionally marked as 'required' for 
	all municipalities at or below them in the municipality chain. 
- Any requirement required from a municipality higher up the chain, should show up automatically and can not be removed